package binggallery.chinacloudsites.cn;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import binggallery.chinacloudsites.cn.BingGalleryImage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BING_GALLERY_IMAGE.
*/
public class BingGalleryImageDao extends AbstractDao<BingGalleryImage, Long> {

    public static final String TABLENAME = "BING_GALLERY_IMAGE";

    /**
     * Properties of entity BingGalleryImage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property Minpix = new Property(2, String.class, "minpix", false, "MINPIX");
        public final static Property Maxpix = new Property(3, String.class, "maxpix", false, "MAXPIX");
        public final static Property Copyright = new Property(4, String.class, "copyright", false, "COPYRIGHT");
        public final static Property Desc = new Property(5, String.class, "desc", false, "DESC");
    };


    public BingGalleryImageDao(DaoConfig config) {
        super(config);
    }
    
    public BingGalleryImageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BING_GALLERY_IMAGE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'UID' TEXT NOT NULL ," + // 1: uid
                "'MINPIX' TEXT," + // 2: minpix
                "'MAXPIX' TEXT," + // 3: maxpix
                "'COPYRIGHT' TEXT," + // 4: copyright
                "'DESC' TEXT);"); // 5: desc
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_BING_GALLERY_IMAGE_UID ON BING_GALLERY_IMAGE" +
                " (UID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BING_GALLERY_IMAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BingGalleryImage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUid());
 
        String minpix = entity.getMinpix();
        if (minpix != null) {
            stmt.bindString(3, minpix);
        }
 
        String maxpix = entity.getMaxpix();
        if (maxpix != null) {
            stmt.bindString(4, maxpix);
        }
 
        String copyright = entity.getCopyright();
        if (copyright != null) {
            stmt.bindString(5, copyright);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BingGalleryImage readEntity(Cursor cursor, int offset) {
        BingGalleryImage entity = new BingGalleryImage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // minpix
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // maxpix
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // copyright
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // desc
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BingGalleryImage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getString(offset + 1));
        entity.setMinpix(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMaxpix(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCopyright(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BingGalleryImage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BingGalleryImage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
